---
layout:     post
title:      "C++ Primer - 笔记"
subtitle:   "C++ Primer Summary "
date:       2019-06-18 20:00:00
author:     "Becks"
header-img: "img/post-bg2.jpg"
catalog:    true
tags:
    - Batch
    - 学习笔记
---

Internal or external command are buildin to cmd.exe command. Batch let you run program within the shell. cmd.exe inside C:/Windows/System32 <br/>
如果直接双击 batch script without pause, it 可能闪退 without letting you see the output


**mkdir dir1**: make directory named as dir1 <br/>
**cd ..** : jump back to the parent directory <br/>
**rmdir dir1** : remove directory named dir1, 如果directory不是empty, 显示error: The directory is not empty. <br/>
**rmdir /S** : removes everything inside the folder 包括folder, used to remove a directory tree. <br/>
**rmdir /S /Q** : Quiet Mode, 功能与rmdir /S一样，但是不会问是不是要remove directory tree. <br/>
**del dir1** : delete everything inside the folder，但是不会delete folder，需要再call rmdir dir1 去remove the folder <br/>
**move** : move [Y : /-Y] [path1]filename1 [path2]filename2 , 如果path1等于path2, 那么move 也等于rename,    /-Y flag: 不让prompt confirm 当overwrite file的时候, /-Y prompt会confirm是不是要overwrite file <br/>
**copy** copy source destination : destination可以只是path，不用说具体名字，那么copy时候会保持文件/文件夹 名字一致 <br/>
**delete** : /P 删除前prompt 会确认是否删除。 /s Delet from all subdirectories . /Q Quite mode 删除时候不会问 <br/>
**type** Displays the contents of a text file or fiels 像linux 的cat 
**exit /b** 与goto :eof 功能一样 退出程序

## Variable and Basic Types

**Object**: an object is a region of memory that has a type. In the book, we will freely use the term *object* regardless of whether the object has built-in or class type, named or unnamed (命名的还是未命名的), or can be read or written.

<span style="background-color: #FFFF00">**Initialization is not assignment**</span>. Initialization happens when a variable is given a value *when it is created*.(创建变量时 赋予它一个初始值). Assignment obliterates an object's current value and replaces that value with a new one (把对象当前值擦除，用一个新值代替)

#### Initialization, Definition, Declaration, Scope

**List Initialization**

下面四种初始化都正确

```c++
int units_sold = 0;
int units_sold = {0};
int units_sold {0};
int units_sold(0);
```

when used with variables of built-in type, List Initialization has one important property: The compiler will not let us initialize variables of built-in type if the initializer might lead to the loss of information. (编译器将会报错，如果使用列表初始化且初始值存在丢失信息的风险). 

```c++
long double id = 3.1415026536;
int a{ld}, b = {ld}; //error: 存在丢失信息风险

int c(ld), d = ld; // 转化执行，但是丢失了部分值 (truncated)
```

The compiler rejects the initializations of a and b because using a long double to initialize an int is likely to lose data. the fractional part of ld will be truncated. (long double 初始化int 变量时可能丢失数据，所以编译器拒绝了a 和 b的初始请求. 至少ld 的小数部分丢失，而且int 也可能存不下ld的整数部分因为是long)


**Default Initialization**

Most classess let us define objects without <span style="color: red">explict initializers</span>. Such classes supply an appropriate default value. e.g. std:string empty; //empty implicitly initialized to the empty string. 

Note: Uninitialized objects of built-in type defined inside a function body have undefined value. Objects of class type that we do not explicitly initialize have a value that is defined by the class.

**Variable Declarations and Definitions**

 <span style="background-color: #FFFF00">**A declaration makes a name known to the program. A definition creates the associated entity.**</span>

A variable **declaration**  <span style="background-color: #FFFF00"> specifies the type and name of a variable</span>. A variable definition is a declaration. In addition to specifying the name and type, a **definition** also <span style="background-color: #FFFF00"> allocates storage and may provide the variable with an initial value</span>. 变量声明规定了变量的类型和名字，在这一点上定义与之相同. 但除此之外, 定义还申请存储空间, 也可能会为变量赋一个初始值

如果想声明一个变量而非定义它，在变量前添加extern

```c++
extern int i; //声明i而非定义i

int j; //声明并定义j
```

任何包含了显示初始化的声明既是定义. 给extern 表含的变量一个初始值，抵消了extern的作用

```c++
extern int i = 5; //定义
```

<span style="background-color: #FFFF00"> Variable must be defined exactly once but can be declared many times</span> 变量只能被定义一次，但可以被声明多次

**Nested Scopes**

用 :: 访问global variable (explicitly request global variable)

```c++
int reused = 42;
int main(){
    cout << resused <<endl; // 42

    int reused = 0; //新建局部变量，覆盖全局变量

    cout << resused <<" global " << ::resused <<endl; // 0 , 42
}
```




#### Compound Types

A **compount type** is a type that is defined in terms of another type, which is references and pointers

**Reference**

At here, reference is only lvalue reference not rvalue reference. 

<span style="background-color: #FFFF00"> reference must be assigned at initlization </span>


```C++
int val = 1024;
int &refval = val; // correct

int &refval2; //error
```






